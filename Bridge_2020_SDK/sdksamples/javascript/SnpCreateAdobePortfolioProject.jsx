////////////////////////////////////////////////////////////////////////////// ADOBE SYSTEMS INCORPORATED// Copyright 2017 Adobe Systems Incorporated// All Rights Reserved//// NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the// terms of the Adobe license agreement accompanying it.  If you have received this file from a// source other than Adobe, then your use, modification, or distribution of it requires the prior// written permission of Adobe.//////////////////////////////////////////////////////////////////////////////**   @fileoverview Shows how to use a AdobePortfolio object to create and upload project to Adobe Portfolio using Adobe Bridge.  @class Shows how to use a AdobePortfolio object to create and upload project to Adobe Portfolio.    <h4>Usage</h4>   <ol>   <li>Open the snippet in the ExtendScript Toolkit (see Readme.txt), setting Bridge CC 2018 as the target application.      <li> In Bridge, select the fies which you want to upload to Adobe Portfolio.   <li> Specify th title by replacing the string "Your Title Goes Here".   <li> Execute the script and your project will be created on Adobe Portfolio website.   </ol>   <h4>Description</h4>     <p>Shows how to create and upload project to Adobe Portfolio from Bridge, using the    AdobePortfolio object and the ExtendScript File object for multiple files.        <p>You must select atleast a single thumbnail for the project to be created or uploaded.    The sample upload project to Adobe Portfolio,   creating project on Adobe Portfolio.<br />   @constructor Constructor   */function SnpCreateAdobePortfolioProject(){	/**	 The context in which this snippet can run.	 @type String	*/	this.requiredContext = "\tExecute against Bridge.\nBridge must be running and \n" 		+ "select images for upload to Portfolio";	$.level = 1; // Debugging level}/** Functional part of this snippet.    Gets a File object for the selected thumbnail and uses it to create a BitmapData object.  Uses the BitmapData object to rotate and export to the JPEG format.	 @return True if the snippet ran as expected, false if no image file is selected in Bridge	 @type Boolean*/SnpCreateAdobePortfolioProject.prototype.run = function(){	var retval = true;	if(!this.canRun()) {		retval = false;			return retval;	}    var portfolio = new AdobePortfolio("Created by SnPCreateAdobePortfolio"); 	// Add selected files on Bridge for uploading to PF    for (var i=0; i< app.document.selectionLength; i++)    {        var t = app.document.selections[i];        portfolio.addFilesForPortfolioProject(t.path);    }        var projecttitle = "Your Title Goes Here";    // Get path of first file for cover. You can select any one by changing the index    var coverpath = app.document.selections[0].path;    var requesttype = 1; // 0 denotes publish only to PF and 1 denotes publish to both PF & Behance    // For example purpose, lets mark the uploaded context as adult    var adultcontent = true;        // Call for creating PF project    portfolio.createPortfolioProject(projecttitle, coverpath, requesttype, adultcontent);		return retval;}/** Determines whether snippet can be run given current context. The snippet fails if these preconditions are not met:  <ul> <li> Must in Bridge <li> A single image file must be selected in Bridge </ul> @return True if this snippet can run, false otherwise @type Boolean*/SnpCreateAdobePortfolioProject.prototype.canRun = function(){			// must run in Bridge 	// must be single image file	if((BridgeTalk.appName == "bridge") && app.document.selectionLength > 0)	{		return true;	}	// Fail if these preconditions are not met.  	$.writeln("ERROR:: Cannot run SnpCreateAdobePortfolioProject");	$.writeln(this.requiredContext);	return false;}/** "main program": construct an anonymous instance and run it  as long as we are not unit-testing this snippet.*/if(typeof(SnpCreateAdobePortfolioProject_unitTest)  == "undefined") {    new SnpCreateAdobePortfolioProject().run();}