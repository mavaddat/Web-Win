////////////////////////////////////////////////////////////////////////////// ADOBE SYSTEMS INCORPORATED// Copyright 2019 Adobe Systems Incorporated// All Rights Reserved//// NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the// terms of the Adobe license agreement accompanying it.  If you have received this file from a// source other than Adobe, then your use, modification, or distribution of it requires the prior// written permission of Adobe.//////////////////////////////////////////////////////////////////////////////**  @fileoverview Shows how to use Stacks in Bridge  @class Shows how get the Stacks in current document and get all details of stack, or call its apis  <h4>Usage</h4>	      <ol>     <li> Launch Bridge CC 2019.     <li> Open the snippet in the ExtendScript Toolkit (see Readme.txt), setting Bridge CC 2019 as the target application.  </ol>	  <h4>Description</h4>  <p>Shows how to get all the stacks in current content panel of the document and use of different properties and methods of stack object.    <p>Stacks property of a document returns array of all the stacks in the current document.  <p>getStackForThumbnail method will return the stack object in which input thumbnail is present.    <p>See the JavaScript Tools Guide for more details.<br />  @constructor Constructor */function SnpManageStacks() {	/**	 The context in which this snippet can run.	 @type String	*/	this.requiredContext = "Needs to run in Bridge";	}/** Functional part of this snippet. Gets all the stack of the current content panel of the document and  shows operations on the stacks  @return True if the snippet ran as expected, false otherwise. @type boolean*/SnpManageStacks.prototype.run = function() {    	if(!this.canRun()) {		return false;	}    //Get the array of all the stacks in browser document.  var stacksList = app.document.stacks;  if (stacksList.length > 0)  {     var stackObj = stacksList[0];          //Check if stack is valid      if (stackObj.isValid())     {       $.writeln("Stack is Valid");     }     //Get all thumbanils of this stack      var stackThumbanils = stackObj.thumbnails;     //Print all the thumbnails name     for (var i=0; i< stackThumbanils.length; i++)     {       $.writeln(stackThumbanils[i].name);     }     //check if stack is expanded or collapsed      var isExpanded = stackObj.isExpanded;     if (isExpanded)     {       $.writeln("Stack is expanded");        //Collapse the stack         stackObj.collapse();     }     else     {       $.writeln("Stack is collapsed");      //Expand the stack        stackObj.expand();     }  }  //If a thumbanil belongs to a stack, we can get the stack object using getStackforThumbnail()  var visibleThumbanils = app.document.visibleThumbnails;  if (visibleThumbanils.length > 0)  {    var thumbnailObj = visibleThumbanils[0];        // Call getStackForThumbnail to get the stack object containing this object    var stackObject = app.document.getStackForThumbnail(thumbnailObj);    if( stackObject )    {       $.writeln("This thumbnail is part of this stack object");       //do other operations as shown above    }    else    {        $.writeln("This thumbnail is not part of any stack object");    }  }  return true;}/**  Determines whether snippet can be run given current context.  The snippet   fails if these preconditions are not met:  <ul>  <li> Must be running in Bridge  </ul>  @return True if this snippet can run, false otherwise  @type boolean*/SnpManageStacks.prototype.canRun = function(){	// Must be running in Bridge & have a selection	if( (BridgeTalk.appName == "bridge")) {		return true;  }	// Fail if these preconditions are not met.  	// Bridge must be running,	$.writeln("ERROR:: Cannot run SnpManageStacks");	$.writeln(this.requiredContext);	return false;}/** "main program": construct an anonymous instance and run it  as long as we are not unit-testing this snippet.*/if(typeof(SnpManageStacks_unitTest ) == "undefined") {	new SnpManageStacks().run();}