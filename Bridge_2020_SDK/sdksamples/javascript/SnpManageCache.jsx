////////////////////////////////////////////////////////////////////////////// ADOBE SYSTEMS INCORPORATED// Copyright 2018 Adobe Systems Incorporated// All Rights Reserved//// NOTICE:  Adobe permits you to use, modify, and distribute this file in accordance with the// terms of the Adobe license agreement accompanying it.  If you have received this file from a// source other than Adobe, then your use, modification, or distribution of it requires the prior// written permission of Adobe.//////////////////////////////////////////////////////////////////////////////**  @fileoverview Shows how to manage Bridge cache  @class Shows how to export, import and purge Bridge cache using ManageCache Object  <h4>Usage</h4>	      <ol>     <li> Launch Bridge CC 2019.     <li> Open the snippet in the ExtendScript Toolkit (see Readme.txt), setting Bridge CC 2019 as the target application.  </ol>	  <h4>Description</h4> <p>ManageCache object gives capabality to use "Manage Cache" feature through javascript.   <p>See the JavaScript Tools Guide for more details.<br />   @constructor Constructor */function SnpManageCache() {	/**	 The context in which this snippet can run.	 @type String	*/	this.requiredContext = "Needs to run in Bridge";	}/** Functional part of this snippet. Selects a "Manage Cache" method and perform  export, import or purge accordingly.  @return True if the snippet ran as expected, false otherwise. @type boolean*/SnpManageCache.prototype.run = function() {    	if(!this.canRun()) {		return false;	}    var qManageCache = new ManageCache("Created by SnpManageCache");  /**    Replace folder path string here    C:\<folder1>\..,    /Users/<name>/<folder1>/...,    @type String   */  var strFolderPath = "";  var bResult = false;  $.writeln("Building and exporting cache in Bridge...");  /**    Builds cache for a selected folder and all sub folders.   */  var bResult = qManageCache.buildAndExportSharedCache(strFolderPath, true);  if(bResult)  {    $.writeln("Export Succcessful for "+strFolderPath);  }  else  {    $.writeln("Export failed for "+strFolderPath);  }  $.writeln("Building and exporting cache in Bridge end");  $.writeln("Importing cache in Bridge...");  try  {      /**        Imports the already exported. The cache is imported for the selected folder and         all subfolders, which avoids the need to build the new cache.       */      var bResult = qManageCache.importSharedCache(strFolderPath);      if(bResult)      {          $.writeln("Import Succcessful for "+strFolderPath);      }      else      {          $.writeln("Import failed for "+strFolderPath);      }  }  catch(e)  {      $.writeln("Import failed for "+strFolderPath+" because of an exception");  }  $.writeln("Importing cache in Bridge end");  $.writeln("Purging all cache in Bridge...");  /**    Purges all local (thumbnail) cache for all the folders.   */  qManageCache.purgeAllLocalCache();  $.writeln("Purging all cache in Bridge end");    $.writeln("Purging cache in Bridge...");  /**   make changes to purge for all subfolders and shared cache here    @type Boolean  */  var purgeSubFoldersCache = true;  var purgeExportedCache = true;  /**    Purges all cache for the selected folder.    You can choose to include all subfolders for purging. If the chosen path already has     the exported cache, you can choose to delete the cache via this method.   */  qManageCache.purgeCacheForLocation(strFolderPath, purgeSubFoldersCache, purgeExportedCache);  $.writeln("Purging cache in Bridge end");  return true;}/**  Determines whether snippet can be run given current context.  The snippet   fails if these preconditions are not met:  <ul>  <li> Must be running in Bridge  </ul>  @return True if this snippet can run, false otherwise  @type boolean*/SnpManageCache.prototype.canRun = function(){	// Must be running in Bridge & have a selection	if( (BridgeTalk.appName == "bridge")) {		return true;  }	// Fail if these preconditions are not met.  	// Bridge must be running,	$.writeln("ERROR:: Cannot run SnpManageCache");	$.writeln(this.requiredContext);	return false;}/** "main program": construct an anonymous instance and run it  as long as we are not unit-testing this snippet.*/if(typeof(SnpManageCache_unitTest ) == "undefined") {	new SnpManageCache().run();}